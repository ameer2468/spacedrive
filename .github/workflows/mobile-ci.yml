name: Mobile CI

on:
  pull_request:
  push:
    branches:
      - main
    paths-ignore:
      - '**/.md'
  workflow_dispatch:

env:
  SPACEDRIVE_CUSTOM_APT_FLAGS: --no-install-recommends

jobs:
  android:
    name: Android
    runs-on: macos-12
    env:
      SPACEDRIVE_CI: '1'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Setup Java JDK
        uses: actions/setup-java@v3.10.0
        with:
          java-version: '18'
          distribution: 'temurin'

      - name: Install pnpm
        uses: pnpm/action-setup@v2.2.2
        with:
          version: 7.x.x

      - name: Install Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18
          cache: 'pnpm'

      - name: Install Rust stable
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          profile: minimal

      - name: Cache Rust deps
        uses: Swatinem/rust-cache@v2
        with:
          save-if: ${{ inputs.save-cache }} == "true"

      - name: Run 'setup-system.sh' script
        shell: bash
        run: ./.github/scripts/setup-system.sh mobile

      - name: Generate Prisma client
        uses: ./.github/actions/generate-prisma-client

      - name: Install pnpm dependencies
        run: pnpm i --frozen-lockfile

      - name: Setup Android SDK Tools
        uses: android-actions/setup-android@v2.0.2

      - name: Cache NDK
        uses: actions/cache@v3
        with:
          path: ${{ env.ANDROID_HOME }}/ndk/23.1.7779620
          key: ndk-23.1.7779620

      - name: Install NDK
        run: echo "y" | sudo ${ANDROID_HOME}/cmdline-tools/latest/bin/sdkmanager --install "ndk;23.1.7779620"

      - name: Cache Gradle
        uses: gradle/gradle-build-action@v2

      - name: Build Android
        working-directory: ./apps/mobile/android
        run: chmod +x ./gradlew && ./gradlew assembleRelease --no-daemon

      - name: Cache AVD
        uses: actions/cache@v3
        id: avd-cache
        with:
          path: |
            ~/.android/avd/*
            ~/.android/adb*
          key: avd-33

      - name: Generate AVD Snapshot
        if: steps.avd-cache.outputs.cache-hit != 'true'
        uses: reactivecircus/android-emulator-runner@v2
        with:
          api-level: 33
          target: google_apis
          ndk: 23.1.7779620
          arch: x86_64
          force-avd-creation: false
          emulator-options: -no-window -gpu swiftshader_indirect -noaudio -no-boot-anim -camera-back none
          disable-animations: false
          script: echo "Generated AVD snapshot"

      - name: Install Maestro
        run: |
          curl -Ls "https://get.maestro.mobile.dev" | bash
          echo "$HOME/.maestro/bin" >> $GITHUB_PATH

      - name: Run Tests
        uses: reactivecircus/android-emulator-runner@v2
        with:
          api-level: 33
          target: google_apis
          ndk: 23.1.7779620
          arch: x86_64
          force-avd-creation: false
          emulator-options: -no-snapshot-save -no-window -gpu swiftshader_indirect -noaudio -no-boot-anim -camera-back none
          disable-animations: true
          script: |
            adb install -r apps/mobile/android/app/build/outputs/apk/release/app-release.apk
            adb wait-for-device
            maestro test apps/mobile/tests/onboarding.yaml

  # ios:
  #   name: Build iOS
  #   runs-on: macos-12
  #   steps:
  #     - name: Checkout repository
  #       uses: actions/checkout@v3

  #     - name: Install Xcode
  #       uses: maxim-lobanov/setup-xcode@v1.5.1
  #       with:
  #         xcode-version: latest-stable

  #     - name: Install pnpm
  #       uses: pnpm/action-setup@v2.2.2
  #       with:
  #         version: 7.x.x

  #     - name: Install Node.js
  #       uses: actions/setup-node@v3
  #       with:
  #         node-version: 18
  #         cache: 'pnpm'

  #     - name: Install Rust stable
  #       uses: actions-rs/toolchain@v1
  #       with:
  #         toolchain: stable
  #         profile: minimal

  #     - name: Cache Rust deps
  #       uses: Swatinem/rust-cache@v2
  #       with:
  #         save-if: ${{ inputs.save-cache }} == "true"

  #     - name: Run 'setup-system.sh' script
  #       shell: bash
  #       run: ./.github/scripts/setup-system.sh mobile

  #     - name: Generate Prisma client
  #       uses: ./.github/actions/generate-prisma-client

  #     - name: Install pnpm dependencies
  #       run: pnpm i --frozen-lockfile

  #     - name: Cache Pods
  #       uses: actions/cache@v3
  #       with:
  #         path: |
  #           ./apps/mobile/ios/Pods
  #           ~/Library/Caches/CocoaPods
  #           ~/.cocoapods
  #         key: pods-${{ hashFiles('./apps/mobile/ios/Podfile.lock') }}
  #         restore-keys: pods-

  #     - name: Install Pods
  #       working-directory: ./apps/mobile/ios
  #       run: pod install --repo-update

  #     - name: Build iOS
  #       working-directory: ./apps/mobile/ios
  #       run: xcodebuild -workspace ./Spacedrive.xcworkspace -scheme Spacedrive -destination 'platform=iOS Simulator,name=iPhone 11' -configuration Debug -sdk iphonesimulator -derivedDataPath build

  # TODO: Debug/fix rust x86_64 build issue
  # TODO: Test on IOS Simulator
